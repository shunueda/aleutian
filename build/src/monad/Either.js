import{identity as t}from"../util/predef.js";import{Option as e}from"./Option.js";import{Base as i}from"../Base.js";import{addDoubleQuoteIfString as r}from"../util/util.js";export class Either extends i{static flatten(e){return e.flatMap(t)}static Left(t){return new Left(t)}static Right(t){return new Right(t)}flatMap(t){return this.fold(Either.Left,t)}fold(t,e){return this.isRight?e(this.value):t(this.value)}getOrElse(e){return this.fold(e,t)}getOrNone(){return this.fold(()=>e.None(),t=>e.Some(t))}map(t){return this.flatMap(e=>Either.Right(t(e)))}mapLeft(t){return this.fold(e=>Either.Left(t(e)),t=>Either.Right(t))}match(t){return this.fold(e=>t.left(e),e=>t.right(e))}onLeft(t){return this.isLeft&&t(this.value),this}onRight(t){return this.isRight&&t(this.value),this}swap(){return this.fold(Either.Right,Either.Left)}toString(){return this.fold(t=>`Either.Left(${r(t)})`,t=>`Either.Right(${r(t)})`)}}export class Right extends Either{constructor(t){super(),this.value=t,this.isLeft=!1,this.isRight=!0}}export class Left extends Either{constructor(t){super(),this.value=t,this.isLeft=!0,this.isRight=!1}}